version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sisyphus_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sisyphus_db}
      POSTGRES_USER: ${POSTGRES_USER:-sisyphus_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sisyphus_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - sisyphus_network
    restart: unless-stopped

  # Redis (Optional - for task scheduling)
  redis:
    image: redis:7-alpine
    container_name: sisyphus_redis_prod
    volumes:
      - redis_data:/data
    networks:
      - sisyphus_network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile.prod
    container_name: sisyphus_backend_prod
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - REDIS_ENABLED=${REDIS_ENABLED:-True}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - REFRESH_TOKEN_EXPIRE_DAYS=${REFRESH_TOKEN_EXPIRE_DAYS:-7}
      - ENVIRONMENT=production
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
    depends_on:
      - postgres
      - redis
    networks:
      - sisyphus_network
    restart: unless-stopped
    command: gunicorn main:app -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000

  # Frontend
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile.prod
    container_name: sisyphus_frontend_prod
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL}
    depends_on:
      - backend
    networks:
      - sisyphus_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  sisyphus_network:
    driver: bridge 